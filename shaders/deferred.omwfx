uniform_float bal_diffuse {
    default = 1.0;
    min = 0.0;
    max = 10.0;
    step = 0.03;
    display_name = "Diffuse";
}

uniform_float bal_ambient {
    default = 1.0;
    min = 0.0;
    max = 10.0;
    step = 0.03;
    display_name = "Ambient";
}

fragment deferred {
    omw_In vec2 omw_TexCoord;

    vec3 rgb2hsv(vec3 c)
    {
        vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
        vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));
        vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));

        float d = q.x - min(q.w, q.y);
        float e = 1.0e-10;
        return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
    }

    vec3 hsv2rgb(vec3 c)
    {
        vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
        vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
        return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
    }

    void untonemap(inout vec3 color) {
        const float k = 1.5;
        color = -log2(1.0 - color);
        color = vec3(1.0) - exp2(color * -k);
    }

    void colorToPbr(vec3 color, out vec3 albedo, out float ao) {
        untonemap(color);
        vec3 hsv = rgb2hsv(color);

        ao = hsv.z * 1.2;
        albedo = hsv2rgb(vec3(hsv.x, hsv.y, 1.0));
    }

    vec3 lambert(vec3 norm, vec3 wpos, vec3 light_dir, vec3 light_color, vec3 a, vec3 d) {
        float ambient = 1.0;
        float diffuse = max(dot(norm, -light_dir), 0.0);

        vec3 cam_dir = normalize(wpos - omw.eyePos.xyz);
        float specular = pow(max(dot(-cam_dir, reflect(light_dir, normalize(norm))), 0.0), 10.0) * 0.5;

        return light_color * (ambient * a + diffuse * d + specular);
    }

    vec3 lighting(vec3 surf_col, vec3 wpos, vec3 norm) {
        vec3 light = vec3(0.0);

        if (omw.isInterior) {
            light += lambert(norm, wpos, vec3(0.0, 0.0, -1.0), omw.sunColor.rgb, vec3(1.0), vec3(1.5));
        } else {
            light += lambert(norm, wpos, vec3(-omw.sunPos.xy, -abs(omw.sunPos.z)), omw.sunColor.rgb, vec3(0.5, 0.6, 0.8), vec3(1.5));
        }

        for (int i = 0; i < omw_GetPointLightCount(); i ++) {
            vec3 light_pos = omw_GetPointLightWorldPos(i);
            float dist = distance(light_pos, wpos);
            float ndist = dist / omw_GetPointLightRadius(i);
            float power = pow(clamp(1.0 - ndist, 0.0, 1.0), 2.0);
            light += lambert(norm, wpos, (wpos - light_pos) / dist, omw_GetPointLightDiffuse(i), vec3(1.0), vec3(2.0)) * power * 1.5;
        }

        return surf_col * light;
    }

    void main() {
        vec4 old_col = omw_Texture2D(omw_SamplerLastShader, omw_TexCoord);
        if (OMW_NORMALS != 1) {
            omw_FragColor = old_col * vec4(1.0, 0.0, 0.0, 1.0);
            return;
        }

        vec3 wpos = omw_GetWorldPosFromUV(omw_TexCoord);
        vec3 norm = (omw.invViewMatrix * vec4(vec3(omw_Texture2D(omw_SamplerNormals, omw_TexCoord).xyz - 0.5) * 2.0, 0.0)).xyz;

        vec3 col = lighting(old_col.rgb, wpos, norm);

        omw_FragColor = vec4(col.rgb, 1.0);
    }
}

technique {
    passes = deferred;
    version = "0.1";
    description = "Deferred rendering for OpenMW";
    author = "zesterer";
    pass_normals = true;
    pass_lights = true;
    forward_lighting = false;
}
